grammar Gisele::Language::Grammar

  ### Process statements

  rule process_statement
      implicit_statement
    | explicit_statement
  end

  rule implicit_statement
    explicit_statement (spaces explicit_statement)+
  end

  rule explicit_statement
      if_statement
    | while_statement
    | seq_statement
    | par_statement
    | task_call_statement
  end

  rule if_statement
    'if' spaces bool_expr spaces
      process_statement spaces
    elsif_clause*
    else_clause?
    'end'
  end

  rule elsif_clause
    'elsif' spaces bool_expr spaces 
      process_statement spaces
  end

  rule else_clause
    'else' spaces process_statement spaces
  end

  rule while_statement
    'while' spaces bool_expr spaces
      process_statement spaces
    'end'
  end

  rule seq_statement
    'seq' spaces explicit_statement+ spaces 'end'
  end

  rule par_statement
    'par' spaces explicit_statement+ spaces 'end'
  end

  rule task_call_statement
    task_name
  end

  ### Boolean expressions

  rule bool_expr
    bool_and
  end

  rule bool_and
      (bool_or spaces 'and' spaces bool_expr) 
    | bool_or
  end

  rule bool_or
      (bool_not spaces 'or' spaces bool_expr) 
    | bool_not
  end

  rule bool_not
      ('not' &([ \t\n] | '(') spacing bool_term) 
    | bool_term
  end

  rule bool_term
    bool_parenthesed | boolean_literal | bool_varref
  end

  rule bool_parenthesed
    '(' spacing bool_expr spacing ')'
  end

  rule bool_varref
    variable_name
  end

  ### Variables

  rule trackvar_def
    'trackvar' spaces variable_name spacing
      event_set (spacing ',' spacing event_set)?
      (spaces 'initially' spaces boolean_literal)?
  end

  rule fluent_def
    'fluent' spaces variable_name spacing
      event_set spacing ',' spacing event_set
    (spaces 'initially' spaces boolean_literal)?
  end

  ### Events

  rule event_set
    '{' spacing event_commalist? spacing '}'
  end

  rule event_commalist
    event spacing (',' spacing event_commalist)?
  end

  rule event
    task_start_or_end | event_name
  end

  rule task_start_or_end
    task_name ':' ('start' | 'end')
  end

  ### Names
  
  rule task_name
    [A-Z] [A-Za-z0-9_]*
  end

  rule variable_name
    [a-z] [A-Za-z0-9_]*
  end

  rule event_name
    [a-z] [a-z0-9_]*
  end

  ### Literals

  rule boolean_literal
    'true' | 'false'
  end

  ### Spacing

  rule spaces
    [ \t\n]+
  end

  rule spacing
    [ \t\n]*
  end

end